{
  "description": "Test Copilot libraries filtering",
  "libNames": ["ballerina/http", "ballerina/io"],
  "mode": "CORE",
  "expectedLibraries": [{"name":"ballerina/http","description":"This module allows you to access the http client and server endpoints.","typeDefs":[{"name":"CredentialsConfig","description":"Represents credentials for Basic Auth authentication.","type":"Record","fields":[]},{"name":"BearerTokenConfig","description":"Represents token for Bearer token authentication.","type":"Record","fields":[{"name":"token","type":{"name":"string"},"description":"Bearer token for authentication"}]},{"name":"JwtIssuerConfig","description":"Represents JWT issuer configurations for JWT authentication.","type":"Record","fields":[]},{"name":"ClientConfiguration","description":"Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint. The following fields are inherited from the other configuration records in addition to the Client-specific configs.","type":"Record","fields":[{"name":"timeout","type":{"name":"int"},"description":""}]},{"name":"HttpVersion","description":"Defines the supported HTTP protocols.","type":"Enum","members":[{"name":"HTTP_1_0","description":"Represents HTTP/1.0 protocol"},{"name":"HTTP_1_1","description":"Represents HTTP/1.1 protocol"},{"name":"HTTP_2_0","description":"Represents HTTP/2.0 protocol"}]},{"name":"ClientHttp2Settings","description":"Provides settings related to HTTP/2 protocol.","type":"Record","fields":[{"name":"http2PriorKnowledge","type":{"name":"boolean?"},"description":"Configuration to enable HTTP/2 prior knowledge"},{"name":"http2InitialWindowSize","type":{"name":"int?"},"description":"Configuration to change the initial window size"}]},{"name":"Compression","description":"Options to compress using gzip or deflate.","type":"Record","fields":[]},{"name":"KeepAlive","type":"Record","description":"Defines the possible values for the keep-alive configuration in service and client endpoints.","fields":[]},{"name":"Chunking","type":"Record","description":"Defines the possible values for the chunking configuration in HTTP services and clients.","fields":[]},{"name":"PoolConfiguration","type":"Record","description":"Configurations for managing HTTP client connection pool.","fields":[{"name":"maxActiveConnections","type":{"name":"int"},"description":"Max active connections per route(host:port). Default value is -1 which indicates unlimited."}]},{"name":"CacheConfig","type":"Record","description":"Provides a set of configurations for controlling the caching behaviour of the endpoint.","fields":[{"name":"enabled","type":{"name":"boolean?"},"description":"Specifies whether HTTP caching is enabled. Caching is enabled by default."}]},{"name":"CircuitBreakerConfig","type":"Record","description":"Provides a set of configurations for controlling the behaviour of the Circuit Breaker.","fields":[]},{"name":"RetryConfig","type":"Record","description":"Provides configurations for controlling the retrying behavior in failure scenarios.","fields":[{"name":"count","type":{"name":"int?"},"description":"Number of retry attempts before giving up"}]},{"name":"ResponseLimitConfigs","type":"Record","description":"Provides inbound response status line, total header and entity body size threshold configurations.","fields":[{"name":"maxHeaderSize","type":{"name":"int?"},"description":"Maximum allowed size for headers. Exceeding this limit will result in a ClientError"}]},{"name":"ClientSecureSocket","type":"Record","description":"Provides configurations for facilitating secure communication with a remote HTTP endpoint.","fields":[{"name":"enable","type":{"name":"boolean?"},"description":"Enable SSL validation"}]},{"name":"Method","type":"Enum","description":"Represents HTTP methods.","members":["GET","POST","PUT","DELETE","PATCH","OPTIONS","HEAD"]},{"name":"RequestMessage","type":"Union","description":"The types of messages that are accepted by HTTP client when sending out the outbound request.","members":["anydata","Request"]},{"name":"ClientAuthConfig","type":"Union","description":"Defines the authentication configurations for the HTTP client.","members":["CredentialsConfig","BearerTokenConfig","JwtIssuerConfig"]},{"name":"QueryParams","type":"typedesc","description":"Defines the record type of query parameters supported with client resource methods.","member":["map<string>"]},{"name":"ProxyConfig","type":"Record","description":"Proxy server configurations to be used with the HTTP client endpoint.","fields":[{"name":"port","type":{"name":"int?"},"description":"Enable SSL validation"}]},{"name":"Response","type":"Class","description":"Represents an HTTP response.","functions":[]}],"clients":[{"name":"Client","description":"The HTTP client provides the capability for initiating contact with a remote HTTP service. The API it provides includes the functions for the standard HTTP methods forwarding a received request and sending requests using custom HTTP verbs.","functions":[{"name":"init","type":"Constructor","description":"Gets invoked to initialize the client. During initialization, the configurations provided through the config record is used to determine which type of additional behaviours are added to the endpoint (e.g., caching, security, circuit breaking).","parameters":[{"name":"url","type":{"name":"string"},"description":"URL of the target service"},{"name":"config","type":{"name":"ClientConfiguration?","links":[{"category":"internal","recordName":"ClientConfiguration"}]},"description":"The configurations to be used when initializing the client"}],"return":{"type":{"name":"nil"}}},{"name":"get","type":"Remote Function","description":"function can be used to send HTTP GET requests to HTTP endpoints.","parameters":[{"name":"path","type":{"name":"string"},"description":"Resource path"},{"name":"headers","type":{"name":"map<string|string[]>?"},"description":"The entity headers"}],"return":{"type":{"name":"<>|error"},"description":"The response record of the request or an `http:ClientError` if failed to establish the communication with the upstream server or a data binding failure"}},{"name":"post","type":"Remote Function","description":"function can be used to send HTTP POST requests to HTTP endpoints.","parameters":[{"name":"path","type":{"name":"string"},"description":"Resource path"},{"name":"message","type":{"name":"anydata"},"description":"An HTTP outbound request or any allowed payload"},{"name":"headers","type":{"name":"map<string|string[]>?"},"description":"The entity headers"}],"return":{"type":{"name":"<>|error"},"description":"The response record of the request or an `http:ClientError` if failed to establish the communication with the upstream server or a data binding failure"}},{"name":"put","type":"Remote Function","description":"function can be used to send HTTP PUT requests to HTTP endpoints.","parameters":[{"name":"path","type":{"name":"string"},"description":"Resource path"},{"name":"message","type":{"name":"anydata"},"description":"An HTTP outbound request or any allowed payload"},{"name":"headers","type":{"name":"map<string|string[]>?"},"description":"The entity headers"}],"return":{"type":{"name":"<>|error"},"description":"The response record of the request or an `http:ClientError` if failed to establish the communication with the upstream server or a data binding failure"}},{"name":"delete","type":"Remote Function","description":"function can be used to send HTTP DELETE requests to HTTP endpoints.","parameters":[{"name":"path","type":{"name":"string"},"description":"Resource path"},{"name":"message","type":{"name":"anydata"},"description":"An HTTP outbound request or any allowed payload"},{"name":"headers","type":{"name":"map<string|string[]>?"},"description":"The entity headers"}],"return":{"type":{"name":"<>|error"},"description":"The response record of the request or an `http:ClientError` if failed to establish the communication with the upstream server or a data binding failure"}}]}]},{"name":"ballerina/io","description":"This module provides file read/write APIs and console print/read APIs. The file APIs allow read and write operations on different kinds of file types such as bytes, text, CSV, JSON, and XML. Further, these file APIs can be categorized as streaming and non-streaming APIs.","typeDefs":[{"fields":[{"name":"system","description":"The system identifier","type":{"name":"string?"},"default":"()"},{"name":"'public","description":"","type":{"name":"string?"},"default":"()"},{"name":"internalSubset","description":"Internal DTD schema","type":{"name":"string?"},"default":"()"}],"name":"XmlDoctype","description":"Represents the XML DOCTYPE entity.","type":"Record"},{"fields":[{"name":"xmlEntityType","description":"The entity type of the XML input (the default value is `DOCUMENT_ENTITY`)","type":{"name":"XmlEntityType","links":[{"category":"internal","recordName":"XmlEntityType"}]},"default":"DOCUMENT_ENTITY"},{"name":"doctype","description":"XML DOCTYPE value (the default value is `()`)","type":{"name":"XmlDoctype?","links":[{"category":"internal","recordName":"XmlDoctype"}]},"default":"()"}],"name":"XmlWriteOptions","description":"The writing options of an XML.","type":"Record"},{"name":"AccessDeniedError","description":"This will get returned due to file permission issues.","type":"error"},{"name":"ConfigurationError","description":"This will get returned if there is an invalid configuration.","type":"error"},{"name":"ConnectionTimedOutError","description":"This will return when connection timed out happen when try to connect to a remote host.","type":"error"},{"name":"EofError","description":"This will get returned if read operations are performed on a channel after it closed.","type":"error"},{"name":"Error","description":"Represents IO module related errors.","type":"error"},{"name":"FileNotFoundError","description":"This will get returned if the file is not available in the given file path.","type":"error"},{"name":"GenericError","description":"Represents generic IO error. The detail record contains the information related to the error.","type":"error"},{"name":"TypeMismatchError","description":"This will get returned when there is an mismatch of given type and the expected type.","type":"error"},{"value":"\"BE\"","varType":{"name":"string"},"name":"BIG_ENDIAN","description":"Specifies the bytes to be in the order of most significant byte first.","type":"Constant"},{"value":"\":\"","varType":{"name":"string"},"name":"COLON","description":"Colon (:) will be use as the field separator.","type":"Constant"},{"value":"\",\"","varType":{"name":"string"},"name":"COMMA","description":"Comma (,) will be used as the field separator.","type":"Constant"},{"value":"\"csv\"","varType":{"name":"string"},"name":"CSV","description":"Field separator will be \",\" and the record separator will be a new line.","type":"Constant"},{"value":"\"\\n\"","varType":{"name":"string"},"name":"CSV_RECORD_SEPARATOR","description":"Represents the record separator of the CSV file.","type":"Constant"},{"value":"\"default\"","varType":{"name":"string"},"name":"DEFAULT","description":"The default value is the format specified by the CSVChannel. Precedence will be given to the field separator and record separator.","type":"Constant"},{"value":"\"UTF8\"","varType":{"name":"string"},"name":"DEFAULT_ENCODING","description":"Default encoding for the abstract read/write APIs.","type":"Constant"},{"value":"\":\"","varType":{"name":"string"},"name":"FS_COLON","description":"Represents the colon separator, which should be used to identify colon-separated files.","type":"Constant"},{"value":"\"LE\"","varType":{"name":"string"},"name":"LITTLE_ENDIAN","description":"Specifies the byte order to be the least significant byte first.","type":"Constant"},{"value":"0","varType":{"name":"int"},"name":"MINIMUM_HEADER_COUNT","description":"Represents the minimum number of headers, which will be included in the CSV.","type":"Constant"},{"value":"\"\\n\"","varType":{"name":"string"},"name":"NEW_LINE","description":"New line character.","type":"Constant"},{"value":"2","varType":{"name":"int"},"name":"stderr","description":"Represents the standard error stream.","type":"Constant"},{"value":"1","varType":{"name":"int"},"name":"stdout","description":"Represents the standard output stream.","type":"Constant"},{"value":"\"\\t\"","varType":{"name":"string"},"name":"TAB","description":"Tab (/t) will be use as the field separator.","type":"Constant"},{"value":"\"tdf\"","varType":{"name":"string"},"name":"TDF","description":"Field separator will be a tab and the record separator will be a new line.","type":"Constant"},{"members":[{"name":"OVERWRITE","description":"Overwrite(truncate the existing content)"},{"name":"APPEND","description":"Append to the existing content"}],"name":"FileWriteOption","description":"Represents a file opening options for writing.","type":"Enum"},{"members":[{"name":"DOCUMENT_ENTITY","description":"An XML document with a single root node"},{"name":"EXTERNAL_PARSED_ENTITY","description":"Externally parsed well-formed XML entity"}],"name":"XmlEntityType","description":"Represents the XML entity type that needs to be written.","type":"Enum"},{"functions":[],"name":"BlockStream","description":"","type":"Class"},{"functions":[],"name":"CsvIterator","description":"","type":"Class"},{"functions":[],"name":"CSVStream","description":"","type":"Class"},{"functions":[],"name":"LineStream","description":"","type":"Class"},{"functions":[],"name":"ReadableByteChannel","description":"","type":"Class"},{"functions":[],"name":"ReadableCharacterChannel","description":"","type":"Class"},{"functions":[],"name":"ReadableCSVChannel","description":"","type":"Class"},{"functions":[],"name":"ReadableDataChannel","description":"","type":"Class"},{"functions":[],"name":"ReadableTextRecordChannel","description":"","type":"Class"},{"functions":[],"name":"StringReader","description":"","type":"Class"},{"functions":[],"name":"WritableByteChannel","description":"","type":"Class"},{"functions":[],"name":"WritableCharacterChannel","description":"","type":"Class"},{"functions":[],"name":"WritableCSVChannel","description":"","type":"Class"},{"functions":[],"name":"WritableDataChannel","description":"","type":"Class"},{"functions":[],"name":"WritableTextRecordChannel","description":"","type":"Class"},{"functions":[],"name":"PrintableRawTemplate","description":"","type":"Class"},{"members":[],"name":"Printable","description":"Defines all the printable types.\n1. any typed value\n2. errors\n3. `io:PrintableRawTemplate` - an raw templated value","type":"Union"},{"members":[],"name":"FileOutputStream","description":"Defines the output streaming types.\n1. `stdout` - standard output stream\n2. `stderr` - standard error stream","type":"Union"},{"members":[],"name":"ByteOrder","description":"Represents network byte order.\n\nBIG_ENDIAN - specifies the bytes to be in the order of most significant byte first.\n\nLITTLE_ENDIAN - specifies the byte order to be the least significant byte first.","type":"Union"},{"members":[],"name":"Format","description":"The format, which will be used to represent the CSV.\n\nDEFAULT - The default value is the format specified by the CSVChannel. Precedence will be given to the field\nseparator and record separator.\n\nCSV - Field separator will be \",\" and the record separator will be a new line.\n\nTDF - Field separator will be a tab and the record separator will be a new line.","type":"Union"},{"members":[],"name":"Separator","description":"Field separators, which are supported by the `DelimitedTextRecordChannel`.\n\nCOMMA - Delimited text records will be separated using a comma\n\nTAB - Delimited text records will be separated using a tab\n\nCOLON - Delimited text records will be separated using a colon(:)","type":"Union"},{"members":[],"name":"Block","description":"The read-only byte array that is used to read the byte content from the streams.","type":"IntersectionType"}],"clients":[],"functions":[{"name":"fileReadBytes","type":"Normal Function","description":"Read the entire file content as a byte array.\n```ballerina\nbyte[]|io:Error content = io:fileReadBytes(\"./resources/myfile.txt\");\n```","parameters":[{"name":"path","description":"The path of the file","type":{"name":"string"}}],"return":{"description":"A read-only byte array or an `io:Error`","type":{"name":"readonly&byte[]|Error","links":[{"category":"internal","recordName":"Error"}]}}},{"name":"fileReadCsv","type":"Normal Function","description":"Read file content as a CSV.\nWhen the expected data type is record[], the first entry of the csv file should contain matching headers.\n```ballerina\nstring[][]|io:Error content = io:fileReadCsv(\"./resources/myfile.csv\");\nrecord{}[]|io:Error content = io:fileReadCsv(\"./resources/myfile.csv\");\n```","parameters":[{"name":"path","description":"The CSV file path","type":{"name":"string"}},{"name":"skipHeaders","description":"Number of headers, which should be skipped prior to reading records","type":{"name":"int"},"default":"0"},{"name":"returnType","description":"The type of the return value (string[] or a Ballerina record)","type":{"name":"typedesc<string[]|map<anydata>>"},"default":"<>"}],"return":{"description":"The entire CSV content in the channel as an array of string arrays, array of Ballerina records or an `io:Error`","type":{"name":"returnType[]|Error","links":[{"category":"internal","recordName":"Error"}]}}},{"name":"fileReadJson","type":"Normal Function","description":"Reads file content as a JSON.\n```ballerina\njson|io:Error content = io:fileReadJson(\"./resources/myfile.json\");\n```","parameters":[{"name":"path","description":"The path of the JSON file","type":{"name":"string"}}],"return":{"description":"The file content as a JSON object or an `io:Error`","type":{"name":"json|Error","links":[{"category":"internal","recordName":"Error"}]}}},{"name":"fileReadLines","type":"Normal Function","description":"Reads the entire file content as a list of lines.\nThe resulting string array does not contain the terminal carriage (e.g., `\\r` or `\\n`).\n```ballerina\nstring[]|io:Error content = io:fileReadLines(\"./resources/myfile.txt\");\n```","parameters":[{"name":"path","description":"The path of the file","type":{"name":"string"}}],"return":{"description":"The file as list of lines or an `io:Error`","type":{"name":"string[]|Error","links":[{"category":"internal","recordName":"Error"}]}}},{"name":"fileReadString","type":"Normal Function","description":"Reads the entire file content as a `string`.\nThe resulting string output does not contain the terminal carriage (e.g., `\\r` or `\\n`).\n```ballerina\nstring|io:Error content = io:fileReadString(\"./resources/myfile.txt\");\n```","parameters":[{"name":"path","description":"The path of the file","type":{"name":"string"}}],"return":{"description":"The entire file content as a string or an `io:Error`","type":{"name":"string|Error","links":[{"category":"internal","recordName":"Error"}]}}},{"name":"fileWriteBytes","type":"Normal Function","description":"Write a set of bytes to a file.\n```ballerina\nbyte[] content = [60, 78, 39, 28];\nio:Error? result = io:fileWriteBytes(\"./resources/myfile.txt\", content);\n```","parameters":[{"name":"path","description":"The path of the file","type":{"name":"string"}},{"name":"content","description":"Byte content to write","type":{"name":"byte[]"}},{"name":"option","description":"To indicate whether to overwrite or append the given content","type":{"name":"FileWriteOption","links":[{"category":"internal","recordName":"FileWriteOption"}]},"default":"OVERWRITE"}],"return":{"description":"An `io:Error` or else `()`","type":{"name":"Error?","links":[{"category":"internal","recordName":"Error"}]}}},{"name":"fileWriteCsv","type":"Normal Function","description":"Write CSV content to a file.\nWhen the input is a record[] type in `OVERWRITE`,  headers will be written to the CSV file by default.\nFor `APPEND`, order of the existing csv file is inferred using the headers and used as the order.\n```ballerina\ntype Coord record {int x;int y;};\nCoord[] contentRecord = [{x: 1,y: 2},{x: 1,y: 2}]\nstring[][] content = [[\"Anne\", \"Johnson\", \"SE\"], [\"John\", \"Cameron\", \"QA\"]];\nio:Error? result = io:fileWriteCsv(\"./resources/myfile.csv\", content);\nio:Error? resultRecord = io:fileWriteCsv(\"./resources/myfileRecord.csv\", contentRecord);\n```","parameters":[{"name":"path","description":"The CSV file path","type":{"name":"string"}},{"name":"content","description":"CSV content as an array of string arrays or a array of Ballerina records","type":{"name":"string[]|map<anydata>[]"}},{"name":"option","description":"To indicate whether to overwrite or append the given content","type":{"name":"FileWriteOption","links":[{"category":"internal","recordName":"FileWriteOption"}]},"default":"OVERWRITE"}],"return":{"description":"`()` when the writing was successful or an `io:Error`","type":{"name":"Error?","links":[{"category":"internal","recordName":"Error"}]}}},{"name":"fileWriteJson","type":"Normal Function","description":"Write a JSON to a file.\n```ballerina\njson content = {\"name\": \"Anne\", \"age\": 30};\nio:Error? result = io:fileWriteJson(\"./resources/myfile.json\", content);\n```","parameters":[{"name":"path","description":"The path of the JSON file","type":{"name":"string"}},{"name":"content","description":"JSON content to write","type":{"name":"json"}}],"return":{"description":"`()` when the writing was successful or an `io:Error`","type":{"name":"Error?","links":[{"category":"internal","recordName":"Error"}]}}},{"name":"fileWriteLines","type":"Normal Function","description":"Write an array of lines to a file.\nDuring the writing operation, a newline character `\\n` will be added after each line.\n```ballerina\nstring[] content = [\"Hello Universe..!!\", \"How are you?\"];\nio:Error? result = io:fileWriteLines(\"./resources/myfile.txt\", content);\n```","parameters":[{"name":"path","description":"The path of the file","type":{"name":"string"}},{"name":"content","description":"An array of string lines to write","type":{"name":"string[]"}},{"name":"option","description":"To indicate whether to overwrite or append the given content","type":{"name":"FileWriteOption","links":[{"category":"internal","recordName":"FileWriteOption"}]},"default":"OVERWRITE"}],"return":{"description":"`()` when the writing was successful or an `io:Error`","type":{"name":"Error?","links":[{"category":"internal","recordName":"Error"}]}}},{"name":"fileWriteString","type":"Normal Function","description":"Write a string content to a file.\n```ballerina\nstring content = \"Hello Universe..!!\";\nio:Error? result = io:fileWriteString(\"./resources/myfile.txt\", content);\n```","parameters":[{"name":"path","description":"The path of the file","type":{"name":"string"}},{"name":"content","description":"String content to write","type":{"name":"string"}},{"name":"option","description":"To indicate whether to overwrite or append the given content","type":{"name":"FileWriteOption","links":[{"category":"internal","recordName":"FileWriteOption"}]},"default":"OVERWRITE"}],"return":{"description":"`()` when the writing was successful or an `io:Error`","type":{"name":"Error?","links":[{"category":"internal","recordName":"Error"}]}}}]}]
}